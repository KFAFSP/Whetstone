<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

using JetBrains.Annotations;

namespace Whetstone.Math
{
    public static partial class Math
    {
<#
		WriteLcm("int", true);
		WriteLcm("uint", false);
		WriteLcm("long", true);
		WriteLcm("ulong", false);
#>
    }
}

<#+
private void WriteLcm2(string AIntType, bool ASigned)
{
#>
		/// <summary>
        /// Get the least common multiple of two integers.
        /// </summary>
        /// <param name="A1">The first integer.</param>
        /// <param name="A2">The second integer.</param>
        /// <returns>
        /// The least common multiple of <paramref name="A1"/> and <paramref name="A2"/>.
        /// </returns>
<#+
	if (ASigned)
	{
#>
        /// <remarks>
        /// The sign of the result is always guaranteed to be positive.
        /// </remarks>
<#+
	}
#>
        [Pure]
        public static <#= AIntType #> Lcm(<#= AIntType #> A1, <#= AIntType #> A2)
        {
			var gcd = Gcd(A1, A2);

            if (gcd == 0) return 0;
			var prod = <#+ if (ASigned) {#>System.Math.Abs(A1 * A2)<#+} else {#>A1 * A2<#+}#>;
            return prod / gcd;
        }
<#+
}

private void WriteLcmN(string AIntType, bool ASigned)
{
#>
		/// <summary>
        /// Get the least common multiple of an array of integers.
        /// </summary>
        /// <param name="A">The array of integers.</param>
        /// <returns>The least common multiple of <paramref name="A"/>.</returns>
<#+
	if (ASigned)
	{
#>
        /// <remarks>
        /// The sign of the result is always guaranteed to be positive.
        /// </remarks>
<#+
	}
#>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="A"/> is <see langword="null"/>.
        /// </exception>
        /// <exception cref="ArgumentException"><paramref name="A"/> is empty.</exception>
        [Pure]
        [ContractAnnotation("A: null => halt;")]
        public static <#= AIntType #> Lcm([NotNull] params <#= AIntType #>[] A)
        {
            if (A == null) throw new ArgumentNullException(nameof(A));
            if (A.Length == 0) throw new ArgumentException("No arguments specified.", nameof(A));
            var result = A[0];

            for (var I = 1; I < A.Length; ++I)
                result = Lcm(result, A[I]);

            return result;
        }
<#+
}

private void WriteLcm(string AIntType, bool ASigned)
{
	WriteLcm2(AIntType, ASigned);
	WriteLcmN(AIntType, ASigned);
}
#>